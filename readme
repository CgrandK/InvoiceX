# Dabtly

Dabtly to aplikacja webowa do zarządzania kontaktami oraz ich rozliczeniami finansowymi. System pozwala ewidencjonować pożyczki, monitorować stany należności i zobowiązań, a także przechowywać dane kontrahentów w jednym, czytelnym miejscu.

## Najważniejsze funkcje

- **Panel główny** – szybki podgląd aktualnych należności, zobowiązań oraz ostatnich operacji.
- **Kontakty** – baza kontrahentów z wyliczanym automatycznie saldem relacji finansowych.
- **Transakcje** – rejestrowanie pożyczek i spłat z rozróżnieniem kierunku przepływu środków.
- **Uwierzytelnianie** – rejestracja użytkowników, logowanie i zarządzanie profilem dzięki Flask-Login.
- **Powiadomienia** – spójny system komunikatów flash informujący o wyniku wykonywanych akcji.

## Stos technologiczny

- **Backend**: Python 3.8+, Flask, SQLAlchemy, Alembic
- **Frontend**: Bootstrap 5, własne style CSS i skrypty JS
- **Baza danych**: SQLite domyślnie (możliwość użycia innych silników zgodnych z SQLAlchemy)
- **Formularze**: Flask-WTF / WTForms

## Struktura projektu

```
dabtly/
├── app/
│   ├── __init__.py           # Tworzenie aplikacji, rejestracja rozszerzeń i blueprintów
│   ├── config.py             # Konfiguracja środowiskowa i odczyt zmiennych
│   ├── forms/                # Formularze kontaktów oraz transakcji
│   ├── models/               # Modele SQLAlchemy: User, Contact, Transaction
│   ├── routes/               # Logika widoków: auth, contact, dashboard, transaction, errors
│   ├── static/               # Style CSS, skrypty JS, czcionki
│   └── templates/            # Szablony Jinja2 dla każdej sekcji aplikacji
├── create_db.py              # Inicjalizacja bazy danych (SQLite)
├── migrations/               # Migracje Alembic
├── requirements.txt          # Lista zależności
├── run.py                    # Punkt wejścia aplikacji
└── readme                    # Ten dokument
```

## Szybki start

1. **Klonowanie repozytorium**
   ```bash
   git clone https://github.com/your-username/dabtly.git
   cd dabtly
   ```
2. **Utworzenie środowiska wirtualnego**
   ```bash
   python -m venv venv
   source venv/bin/activate        # Linux/macOS
   # lub
   venv\Scripts\activate           # Windows
   ```
3. **Instalacja zależności**
   ```bash
   pip install -r requirements.txt
   ```
4. **Konfiguracja zmiennych środowiskowych**
   Utwórz plik `.env` (albo ustaw zmienne w systemie) z wartościami:
   - `SECRET_KEY`
   - `DATABASE_URL` (np. `sqlite:///dabtly_dev.db`)
   - `FLASK_ENV` (`development`, `testing` lub `production`)
5. **Przygotowanie bazy danych**
   ```bash
   python create_db.py
   # lub przy użyciu migracji Alembic
   flask db upgrade
   ```
6. **Uruchomienie aplikacji**
   ```bash
   python run.py
   ```
   Aplikacja będzie dostępna pod adresem [http://localhost:5000](http://localhost:5000).

## Testy

W projekcie znajduje się zestaw testów jednostkowych i funkcjonalnych. Można je uruchomić poleceniem:

```bash
pytest
```

## Dalszy rozwój

- Rozbudowa raportowania o dodatkowe wizualizacje sald.
- Integracja z zewnętrznymi usługami płatności.
- Powiadomienia e-mail lub push dla kluczowych kontaktów.

## Licencja

Projekt udostępniany jest na licencji MIT.
