# InvoiceX - Zarządzanie kontaktami i rozliczeniami

InvoiceX to aplikacja webowa oparta o Flask, która pomaga freelancerom i małym firmom
śledzić kontakty oraz wzajemne rozliczenia finansowe. Projekt pierwotnie zakładał moduł
wystawiania faktur, jednak został on usunięty. Repozytorium skupia się obecnie na
zarządzaniu kontaktami, rejestrowaniu pożyczek oraz monitorowaniu sald.

## Najważniejsze funkcje

- Rejestracja i logowanie użytkowników oraz zarządzanie profilem.
- Dashboard z podsumowaniem sald kontaktów i szybkim wglądem w najważniejsze dane.
- Zarządzanie kontaktami: dodawanie, edycja, podgląd szczegółów i historia rozliczeń.
- Rejestrowanie transakcji (pożyczone/oddane środki) z poziomu każdego kontaktu.
- Obsługa błędów i przyjazne komunikaty dla użytkownika.

## Struktura projektu

```
invoicex/
├── app/
│   ├── __init__.py              # Inicjalizacja aplikacji Flask i konfiguracja rozszerzeń
│   ├── config.py                # Konfiguracja środowiskowa
│   ├── forms/
│   │   ├── contact_form.py      # Formularze związane z kontaktami
│   │   └── transaction_form.py  # Formularze związane z transakcjami
│   ├── models/
│   │   ├── __init__.py          # Eksport modeli
│   │   ├── contact.py           # Model kontaktu
│   │   ├── transaction.py       # Model transakcji
│   │   └── user.py              # Model użytkownika
│   ├── routes/
│   │   ├── __init__.py          # Rejestracja blueprintów
│   │   ├── auth.py              # Logowanie, rejestracja, profil i zmiana hasła
│   │   ├── contact.py           # Widoki CRUD dla kontaktów
│   │   ├── dashboard.py         # Widoki dashboardu
│   │   ├── errors.py            # Obsługa błędów HTTP
│   │   └── transaction.py       # Obsługa transakcji powiązanych z kontaktami
│   ├── static/
│   │   ├── css/                 # Style CSS wspólne dla aplikacji
│   │   ├── fonts/               # Wymagane czcionki (np. do generowania dokumentów PDF)
│   │   └── js/                  # Skrypty JavaScript wykorzystywane w widokach
│   └── templates/
│       ├── auth/                # Szablony związane z autoryzacją
│       ├── contact/             # Widoki listy i szczegółów kontaktów
│       ├── dashboard/           # Widoki dashboardu
│       ├── errors/              # Strony błędów
│       ├── layout.html          # Główny szablon bazowy
│       └── transaction/         # Widoki formularzy transakcji
├── migrations/                  # Migracje bazy danych (Alembic)
├── requirements.txt             # Lista zależności Pythona
├── run.py                       # Skrypt uruchamiający aplikację
└── create_db.py                 # Narzędzie pomocnicze do tworzenia bazy danych
```

## Kluczowe komponenty

### Modele (`app/models/`)

- **User** (`user.py`): przechowuje dane logowania oraz podstawowe informacje o użytkowniku.
- **Contact** (`contact.py`): reprezentuje kontrahenta powiązanego z użytkownikiem.
- **Transaction** (`transaction.py`): zapisuje operacje finansowe między użytkownikiem a kontaktem
  (pożyczki, spłaty, inne rozliczenia).

### Formularze (`app/forms/`)

- **ContactForm**: umożliwia tworzenie i edycję kontaktów.
- **TransactionForm**: pozwala na dodawanie transakcji przypisanych do kontaktu.

### Trasy (`app/routes/`)

- **auth.py**: obsługuje logowanie, rejestrację, profil i zmianę hasła.
- **dashboard.py**: prezentuje podsumowanie sald kontaktów na stronie głównej użytkownika.
- **contact.py**: dostarcza widoki CRUD dla kontaktów oraz widok szczegółów kontaktu.
- **transaction.py**: umożliwia dodawanie i usuwanie transakcji powiązanych z danym kontaktem.
- **errors.py**: definiuje strony błędów (np. 404, 500).

## Instalacja i uruchomienie

### Wymagania

- Python 3.8+
- pip
- virtualenv (opcjonalnie)
- PostgreSQL lub SQLite

### Kroki instalacji

1. Klonowanie repozytorium:
   ```bash
   git clone https://github.com/your-username/invoicex.git
   cd invoicex
   ```

2. Utworzenie i aktywacja wirtualnego środowiska:
   ```bash
   python -m venv venv
   source venv/bin/activate  # Linux/Mac
   # lub
   venv\Scripts\activate     # Windows
   ```

3. Instalacja zależności:
   ```bash
   pip install -r requirements.txt
   ```

4. Utworzenie pliku `.env` na podstawie `.env.example`:
   ```bash
   cp .env.example .env
   ```

5. Uzupełnienie pliku `.env` odpowiednimi wartościami konfiguracyjnymi.

6. (Opcjonalnie) Upewnij się, że wymagane czcionki znajdują się w `app/static/fonts/`.

7. Inicjalizacja bazy danych:
   ```bash
   flask db upgrade
   ```

8. Uruchomienie aplikacji:
   ```bash
   python run.py
   ```

Aplikacja będzie dostępna pod adresem [http://localhost:5000](http://localhost:5000).

## Aktualny zakres projektu

Moduł faktur został usunięty i w repozytorium nie znajdują się już szablony, style ani skrypty
powiązane z wystawianiem faktur. Dokumentacja i kod odzwierciedlają obecny stan – aplikacja
koncentruje się na zarządzaniu kontaktami i rozliczeniami między użytkownikiem a jego
kontrahentami.

## Licencja

Projekt udostępniany jest na licencji MIT. Szczegóły znajdują się w pliku `LICENSE`.
